{
	"kind": "discovery#restDescription",
	"discoveryVersion": "v1",
	"title": "Whit.li API",
	"description": "",
	"protocol": "rest",
	"name": "whitliapi",
	"version": "1.0",
	"basePath": "/",
	"rootUrl": "https://api.whit.li",
	"servicePath": "/",
	"baseUrl": "https://api.whit.li",
	"schemas": {
		"genericBody": {
			"id": "importBody",
			"type": "string"
		},
		"keyResponse": {
			"id": "keyResponse",
			"type": "object",
			"properties": {
				"status": {
					"type": "string",
					"description": "Request status string"
				},
				"message": {
					"type": "string",
					"description": "Verbose API message"
				},
				"body": {
					"description": "Object of body response",
					"$ref": "keyResponseBody"
				},
				"timestamp": {
					"type": "integer",
					"description": "Timestamp (epoch)"
				}
			}
		},
		"keyResponseBody": {
			"id": "keyResponseBody",
			"type": "object",
			"properties": {
				"key": {
					"type": "string",
					"description": ""
				}
			}
		},
		"importResponse": {
			"id": "importResponse",
			"type": "object",
			"properties": {
				"status": {
					"type": "string",
					"description": "Request status string"
				},
				"message": {
					"type": "string",
					"description": "Verbose API message"
				},
				"body": {
					"description": "Object of body response",
					"$ref": "importResponseBody"
				},
				"timestamp": {
					"type": "integer",
					"description": "Timestamp (epoch)"
				}
			}
		},
		"importResponseBody": {
			"id": "importResponseBody",
			"type": "object",
			"properties": {
				"userFields": {
					"type": "integer",
					"description": "Number of fields from the Facebook profile"
				},
				"likesCount": {
					"type": "integer",
					"description": "Number of likes from the Facbook profile"
				},
				"postsCount": {
					"type": "integer",
					"description": "Number of posts from the Facbook profile"
				}
			}
		},
		"populateResponse": {
			"id": "populateResponse",
			"type": "object",
			"properties": {
				"status": {
					"type": "string",
					"description": "Request status string"
				},
				"message": {
					"type": "string",
					"description": "Verbose API message"
				},
				"body": {
					"description": "Object of body response",
					"$ref": "populateResponseBody"
				},
				"timestamp": {
					"type": "integer",
					"description": "Timestamp (epoch)"
				}
			}
		},
		"populateResponseBody": {
			"id": "populateResponseBody",
			"type": "object",
			"properties": {
				"uid": {
					"type": "string",
					"description": "The ID of the user"
				},
				"oauthtoken": {
					"type": "string",
					"description": "OAuth access token"
				},
				"errorString": {
					"type": "string",
					"description": "Verbose error description"
				}
			}
		},
		"compareResponse": {
			"id": "compareResponse",
			"type": "object",
			"properties": {
				"status": {
					"type": "string",
					"description": "Request status string"
				},
				"message": {
					"type": "string",
					"description": "Verbose API message"
				},
				"body": {
					"description": "Object of body response",
					"$ref": "compareResponseBody"
				},
				"timestamp": {
					"type": "integer",
					"description": "Timestamp (epoch)"
				}
			}
		},
		"compareResponseBody": {
			"id": "compareResponseBody",
			"type": "object",
			"properties": {
				"score": {
					"type": "integer"
				},
				"code": {
					"type": "string"
				},
				"common_likes": {
					"type": "array",
					"items": {
						"$ref": "commonLikesObject"
					}
				}
			}
		},
		"commonLikesObject": {
			"id": "commonLikesObject",
			"type": "object",
			"properties": {
				"id": {
					"type":"string"
				},
				"name": {
					"type":"string"
				},
				"type": {
					"type":"string"
				},
				"commonality": {
					"type":"string"
				}
			}
		}

	},
	"resources": {
		"User": {
			"methods": {
				"ImportToken": {
					"path": "user/importToken",
					"httpMethod": "POST",
					"description": "Import a facebook uid and oauth_token combination to allow Whit.li to populate profile, post and interest information automatically at a predetermined schedule.",
					"parameters": {
						"uid": {
							"type": "integer",
							"required": true,
							"default": "",
							"description": "The ID of the user.",
							"location": "query"
						},
						"oauth_token": {
							"type": "string",
							"required": true,
							"default": "",
							"description": "Facebook oauth token",
							"location": "query"
						},
						"format": {
							"type": "string",
							"required": false,
							"default": "json",
							"description": "You can select between json, xml, csv, php and serialized response formats.",
							"location": "query",
							"enum": [
								"json",
								"xml",
								"csv",
								"php"
							],
							"enumDescriptions": [
								"json",
								"xml",
								"csv",
								"php"
							]
						}
					},
					"id": "User.ImportToken",
					"response": {
						"$ref":"importResponse"
					}
				},
				"Populate": {
					"path": "user/populate",
					"httpMethod": "GET",
					"description": "Request Whit.li to refresh data associated with a given uid and oauth_token pair.",
					"parameters": {
						"uid": {
							"type": "integer",
							"required": true,
							"default": "",
							"description": "The ID of the user.",
							"location": "query"
						},
						"format": {
							"type": "string",
							"required": false,
							"default": "json",
							"description": "You can select between json, xml, csv, php and serialized response formats.",
							"location": "query",
							"enum": [
								"json",
								"xml",
								"csv",
								"php"
							],
							"enumDescriptions": [
								"json",
								"xml",
								"csv",
								"php"
							]

						}
					},
					"id": "User.Populate",
					"response": {
						"$ref":"populateResponse"
					}
				},
				"ImportGeneric": {
					"path": "user/importGeneric",
					"httpMethod": "PUT",
					"description": "Import a generic profile from a JSON object.",
					"parameters": {
						"format": {
							"type": "string",
							"required": false,
							"default": "json",
							"description": "You can select between json, xml, csv, php and serialized response formats.",
							"location": "query",
							"enum": [
								"json",
								"xml",
								"csv",
								"php"
							],
							"enumDescriptions": [
								"json",
								"xml",
								"csv",
								"php"
							]

						}
					},
					"id": "User.importGeneric",
					"response": {
						"$ref":"importResponse"
					},
					"request": {
						"$ref":"importBody"
					}
				}
			}
		},
		"Key": {
			"methods": {
				"Get": {
					"path": "key/get",
					"httpMethod": "GET",
					"description": "Get a Whit.li key.  A Whit.li key contains information that describes the various traits of a person.   Each Whit.li key contains multiple vectors that have detailed information about an individual based on the individuals psycho-social profile.",
					"parameters": {
						"uid": {
							"type": "integer",
							"required": true,
							"default": "",
							"description": "The ID of the user.",
							"location": "query"
						},
						"key_id": {
							"type": "integer",
							"required": true,
							"default": "1",
							"description": "The ID of the key.",
							"location": "query"
						},
						"schema": {
							"type": "string",
							"required": false,
							"default": "fb",
							"description": "You can select between fb and generic schemas",
							"location": "query"
						},
						"format": {
							"type": "string",
							"required": false,
							"default": "json",
							"description": "You can select between json, xml, csv, php and serialized response formats.",
							"location": "query",
							"enum": [
								"json",
								"xml",
								"csv",
								"php"
							],
							"enumDescriptions": [
								"json",
								"xml",
								"csv",
								"php"
							]

						}
					},
					"id": "Key.Get",
					"response": {
						"$ref": "keyResponse"
					}
				},
				"Compare": {
					"path": "key/compare",
					"httpMethod": "GET",
					"description": "Compare two users based on a given context associated with key vectors and components.",
					"parameters": {
						"uid1": {
							"type": "integer",
							"required": true,
							"default": "",
							"description": "The ID of the first user to compare.",
							"location": "query"
						},
						"uid2": {
							"type": "integer",
							"required": true,
							"default": "",
							"description": "The ID of the second user to compare.",
							"location": "query"
						},
						"context_id": {
							"type": "integer",
							"required": true,
							"default": "100",
							"description": "The ID of a given context_id to match against. Options are 100 for Work, 101 for Shopping, 102 for Travel, 103 for Roommates, 104 for Friends",
							"location": "query"
						},
						"schema": {
							"type": "string",
							"required": false,
							"default": "fb",
							"description": "You can select between fb and generic schemas",
							"location": "query"
						},
						"format": {
							"type": "string",
							"required": false,
							"default": "json",
							"description": "You can select between json, xml, csv, php and serialized response formats.",
							"location": "query",
							"enum": [
								"json",
								"xml",
								"csv",
								"php"
							],
							"enumDescriptions": [
								"json",
								"xml",
								"csv",
								"php"
							]
						}
					},
					"id": "Key.Compare",
					"response": {
						"$ref":"compareResponse"
					}
				}
			}
		}
	}
}