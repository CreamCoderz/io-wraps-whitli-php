{
	"kind": "discovery#restDescription",
	"discoveryVersion": "v1",
	"title": "Whit.li API",
	"description": "Let's take a quick exploratory dive into the API and see this thing in action. To start out on your journey, simply register for a Whit.li API key.  We currently support responses in JSON and XML.",
	"protocol": "rest",
	"name": "whitliapi",
	"version": "1.0",
	"basePath": "/",
	"rootUrl": "https://api.whit.li",
	"servicePath": "/",
	"baseUrl": "https://api.whit.li/",
	"schemas": {
		"keyResponse": {
			"id": "keyResponse",
			"type": "object",
			"properties": {
				"status": {
					"type": "string",
					"description": "Request status string"
				},
				"message": {
					"type": "string",
					"description": "Verbose API message"
				},
				"body": {
					"type": "object",
					"description": "Object of body response",
					"$ref": "keyResponseBody"
				},
				"timestamp": {
					"type": "int",
					"description": "Timestamp (epoch)"
				}
			}
		},
		"keyResponseBody": {
			"id": "keyResponseBody",
			"type": "object",
			"properties": {
				"key": {
					"$ref": "key"
				}
			}
		},
		"key": {
			"id": "key",
			"type": "string",
			"description": "Whit.li key vector set"
		}
	},
	"resources": {
		"User": {
			"methods": {
				"ImportToken": {
					"path": "user/importToken",
					"httpMethod": "POST",
					"description": "Import a facebook uid and oauth_token combination to allow Whit.li to populate profile, post and interest information automatically at a predetermined schedule.",
					"parameters": {
						"uid": {
							"type": "integer",
							"required": true,
							"default": "",
							"description": "The ID of the user.",
							"location": "query"
						},
						"oauth_token": {
							"type": "string",
							"required": true,
							"default": "",
							"description": "Facebook oauth token",
							"location": "query"
						},
						"format": {
							"type": "string",
							"required": false,
							"default": "json",
							"description": "You can select between json, xml, csv, php and serialized response formats.",
							"location": "query"
						}
					},
					"id": "User.ImportToken"
				},
				"Populate": {
					"path": "user/populate",
					"httpMethod": "GET",
					"description": "Request Whit.li to refresh data associated with a given uid and oauth_token pair.",
					"parameters": {
						"uid": {
							"type": "integer",
							"required": true,
							"default": "",
							"description": "The ID of the user.",
							"location": "query"
						},
						"format": {
							"type": "string",
							"required": false,
							"default": "json",
							"description": "You can select between json, xml, csv, php and serialized response formats.",
							"location": "query"
						}
					},
					"id": "User.Populate"
				}
			}
		},
		"Key": {
			"methods": {
				"Get": {
					"path": "key/get",
					"httpMethod": "GET",
					"description": "Get a Whit.li key.  A Whit.li key contains information that describes the various traits of a person.   Each Whit.li key contains multiple vectors that have detailed information about an individual based on the individuals psycho-social profile.",
					"parameters": {
						"uid": {
							"type": "integer",
							"required": true,
							"default": "",
							"description": "The ID of the user.",
							"location": "query"
						},
						"key_id": {
							"type": "integer",
							"required": true,
							"default": "1",
							"description": "The ID of the key.",
							"location": "query"
						},
						"schema": {
							"type": "string",
							"required": false,
							"default": "fb",
							"description": "You can select between fb and generic schemas",
							"location": "query"
						},
						"format": {
							"type": "string",
							"required": false,
							"default": "json",
							"description": "You can select between json, xml, csv, php and serialized response formats.",
							"location": "query"
						}
					},
					"id": "Key.Get"
				},
				"Compare": {
					"path": "key/compare",
					"httpMethod": "GET",
					"description": "Compare two users based on a given context associated with key vectors and components.",
					"parameters": {
						"uid1": {
							"type": "integer",
							"required": true,
							"default": "",
							"description": "The ID of the first user to compare.",
							"location": "query"
						},
						"uid2": {
							"type": "integer",
							"required": true,
							"default": "",
							"description": "The ID of the second user to compare.",
							"location": "query"
						},
						"context_id": {
							"type": "integer",
							"required": true,
							"default": "100",
							"description": "The ID of a given context_id to match against. Options are 100 for Work, 101 for Shopping, 102 for Travel, 103 for Roommates, 104 for Friends",
							"location": "query"
						},
						"schema": {
							"type": "string",
							"required": false,
							"default": "fb",
							"description": "You can select between fb and generic schemas",
							"location": "query"
						},
						"format": {
							"type": "string",
							"required": false,
							"default": "json",
							"description": "You can select between json, xml, csv, php and serialized response formats.",
							"location": "query"
						}
					},
					"id": "Key.Compare"
				}
			}
		}
	}
}

